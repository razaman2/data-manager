type EventTypes = "standard" | "once";
type Eventable = {
    name: string;
    type: string;
    handlers: Array<Function>;
};

type Handler = Array<Function> | Function;
declare class EventEmitter {
    private emitter;
    get id(): string;
    get events(): Eventable[];
    set events(events: Eventable[]);
    on(subscriptions: string | Record<string, Handler>, handlers?: Handler): Record<string, Function>;
    once(subscriptions: string | Record<string, Handler>, handlers?: Handler): Record<string, Function>;
    off(subscriptions: string, type?: EventTypes): void;
    emit(subscription?: string, ...params: any): Promise<unknown>;
    private register;
    private remove;
    private invoke;
}

export { EventTypes, Eventable, EventEmitter as default };
