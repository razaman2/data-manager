var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/EventEmitter.ts
import { v4 as uuid } from "uuid";
var EventEmitter = class {
  constructor() {
    this.emitter = { id: uuid(), events: [] };
  }
  get id() {
    return this.emitter.id;
  }
  get events() {
    return this.emitter.events;
  }
  set events(events) {
    this.emitter.events = events;
  }
  on(subscriptions, handlers) {
    return this.register(subscriptions, handlers);
  }
  once(subscriptions, handlers) {
    return this.register(subscriptions, handlers, "once");
  }
  off(subscriptions, type) {
    this.remove(subscriptions, type);
  }
  emit(subscription, ...params) {
    return new Promise((resolve) => __async(this, null, function* () {
      const events = subscription ? this.events.filter((event) => event.name === subscription) : this.events;
      const promises = events.reduce((handlers, event) => {
        event.handlers.forEach((handler) => handlers.push(this.invoke(event.name, handler, params)));
        if (event.type === "once") {
          this.off(event.name, event.type);
        }
        return handlers;
      }, []);
      resolve(yield Promise.all(promises));
    }));
  }
  register(subscriptions, handlers, type = "standard") {
    if (handlers && typeof subscriptions === "string") {
      subscriptions = { [subscriptions]: handlers };
    }
    return Object.entries(subscriptions).reduce((subscriptions2, [subscription, handlers2]) => {
      if (subscription.length) {
        this.events.push({
          type,
          name: subscription,
          handlers: Array.isArray(handlers2) ? handlers2 : [handlers2]
        });
        subscriptions2[subscription] = () => this.off(subscription);
      }
      return subscriptions2;
    }, {});
  }
  remove(subscription, type) {
    this.events = this.events.filter((event) => {
      return !(event.name === subscription && (type ? event.type === type : true));
    });
  }
  invoke(subscription, handler, params) {
    try {
      return handler(...params);
    } catch (e) {
      return this.emit("@error", {
        subscription,
        details: e
      });
    }
  }
};

// src/index.ts
var src_default = EventEmitter;
export {
  src_default as default
};
