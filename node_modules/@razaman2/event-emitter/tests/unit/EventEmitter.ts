import EventEmitter from "../../src/EventEmitter";

describe("Standard Event Registrations", () => {
    it("should return an object that contains a key that matches the name of the subscription", () => {
        const subscriptions = new EventEmitter().on("test", () => {
        });

        expect(subscriptions).toHaveProperty("test");
    });

    it("should return an unsubscribe handler that is of type function", () => {
        const subscriptions = new EventEmitter().on("test", () => {
        });

        expect(typeof subscriptions.test === "function").toBe(true);
    });

    it("should call handler when subscription emits", () => {
        const user = {name: "john doe"};
        const event = new EventEmitter();

        event.on("test", () => user.name = "jane doe");
        event.emit("test");

        expect(user.name).toBe("jane doe");
    });

    it("should cancel subscription when calling the unsubscribe handler", () => {
        const user = {name: "john doe"};
        const event = new EventEmitter();
        const subscriptions = event.on("test", () => user.name = "jane doe");

        subscriptions.test();
        event.emit("test");

        expect(user.name).toBe("john doe");
    });

    it("should cancel subscription when off is called with subscription name", () => {
        const user = {name: "john doe"};
        const event = new EventEmitter();

        event.on("test", () => user.name = "jane doe");
        event.off("test");
        event.emit("test");

        expect(user.name).toBe("john doe");
    });

    it("should only return a single unsubscribe handler when multiple handlers are provided", () => {
        const subscriptions = new EventEmitter().on("test", [
            () => {
            },
            () => {
            },
        ]);

        expect(Object.keys(subscriptions)).toHaveLength(1);
    });

    it("should add subscription with multiple handlers", () => {
        const user = {
            name: "john doe",
            age: 36,
        };

        const event = new EventEmitter();

        event.on("test", [
            () => user.name = "jane doe",
            () => user.age = 18,
        ]);

        event.emit("test");

        expect(user.name).toBe("jane doe");
        expect(user.age).toBe(18);
    });

    it("should call handlers on emit until cancelled", () => {
        const user = {age: 36};

        const event = new EventEmitter();

        event.on("test", () => user.age += 1);
        event.emit("test");

        expect(user.age).toBe(37);

        event.emit("test");

        expect(user.age).toBe(38);
    });

    it("should add more handlers to an existing registration", () => {
        const user = {
            name: "john doe",
            age: 36,
        };

        const event = new EventEmitter();

        event.on("test", () => user.name = "jane doe");
        event.on("test", () => user.age = 18);
        event.emit("test");

        expect(user.name).toBe("jane doe");
        expect(user.age).toBe(18);
    });

    it("should create registration from object", () => {
        const user = {name: "john doe"};
        const event = new EventEmitter();

        event.on({
            test: () => user.name = "jane doe",
        });

        event.emit("test");

        expect(user.name).toBe("jane doe");
    });

    it("should pass 0 or more parameters to handler", () => {
        const user: Record<string, any> = {};
        const event = new EventEmitter();

        event.on({
            test: (firstName: string, lastName: string) => {
                user.firstName = firstName;
                user.lastName = lastName;
            },
        });

        event.emit("test", "jane", "doe");

        expect(user.firstName).toBe("jane");
        expect(user.lastName).toBe("doe");
    });

    it("should cancel all occurrences of a registration by name", () => {
        const user = {
            firstName: "",
            lastName: "",
        };

        const event = new EventEmitter();

        event.on("test", () => user.firstName = "john");
        event.on("test", () => user.lastName = "doe");

        event.off("test");
        event.emit("test");

        expect(user.firstName).toBe("");
        expect(user.lastName).toBe("");
    });

    it("should cancel all occurrences of a registration by name and type", () => {
        const items: Array<number> = [];

        const event = new EventEmitter();

        event.on("test", () => items.push(1));
        event.once("test", () => items.push(2));

        event.emit("test");
        event.emit("test");

        expect(items).toMatchObject([1, 2, 1]);
    });

    it("should emit error when handler fails", () => {
        const user: Record<string, any> = {
            firstName: "",
            lastName: "",
        };

        const event = new EventEmitter();

        event.on({
            test: () => user.firstName = "jane",
            ["@error"]: (error: Record<string, any>) => user.error = error,
        });

        event.on("test", () => {
            throw new Error("subscription failed.");
        });

        event.emit("test");

        expect(user.error.subscription).toBe("test");
        expect(user.error.details.message).toBe("subscription failed.");
    });

    it("should continue to execute other handlers after any handler failure", () => {
        const user: Record<string, any> = {
            firstName: "",
            lastName: "",
            order: [],
        };
        const event = new EventEmitter();

        event.on({
            test: () => {
                user.order.push(1);
                user.firstName = "jane";
            },
        });

        event.on({
            test: () => {
                user.order.push(2);
                throw new Error("subscription failed.");
            },
        });

        event.on({
            test: () => {
                user.order.push(3);
                user.lastName = "doe";
            },
        });

        event.on({
            ["@error"]: (error: Record<string, any>) => user.error = error,
        });

        event.emit("test");

        expect(user.firstName).toBe("jane");
        expect(user.lastName).toBe("doe");
        expect(user.error.subscription).toBe("test");
        expect(user.order).toEqual([1, 2, 3]);
    });

    it("should await all registrations", async () => {
        const item = {char: ""};
        const event = new EventEmitter();

        event.on({
            test: () => new Promise((resolve) => {
                setTimeout(() => {
                    resolve(item.char = "a");
                }, 100);
            }),
        });

        event.on({
            test: [
                () => new Promise((resolve) => {
                    setTimeout(() => {
                        resolve(item.char = `${item.char}b`);
                    }, 100);
                }),
                () => new Promise((resolve) => {
                    setTimeout(() => {
                        resolve(item.char = `${item.char}c`);
                    }, 100);
                }),
            ],
        });

        expect(new Promise(async (resolve) => {
            await event.emit("test");

            item.char = `${item.char}def`;

            resolve(item.char);
        })).resolves.toBe("abcdef");
    });
});
