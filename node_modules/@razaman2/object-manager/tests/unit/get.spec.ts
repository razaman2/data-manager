import {describe, it, expect} from "vitest";
import ObjectManager from "../../src/ObjectManager";

describe("ObjectManager - get", () => {
    const user = {
        firstName: "John",
        lastName: "Doe",
        settings: {
            roles: ["admin"],
        },
    };

    it("should read without path", () => {
        expect(ObjectManager.on(user).get()).toStrictEqual(user);
    });

    it("should read with path", () => {
        expect(ObjectManager.on(user).get("settings")).toStrictEqual({
            roles: ["admin"],
        });
    });

    it("should return alternative when path not found", () => {
        expect(ObjectManager.on({}).get("user.firstName", false)).toBe(false);
    });

    it("should read path and alternative from options", () => {
        expect(ObjectManager.on(user).get({path: "firstName"})).toBe("John");

        expect(ObjectManager.on(user).get({path: "user.age", alternative: false})).toBe(false);
    });

    it("should get data at path from supplied object", () => {
        expect(ObjectManager.on({}).get({path: "path", object: {path: "test.1"}})).toBe("test.1");
    });

    it("should get alternative when path not found on supplied object", () => {
        expect(ObjectManager.on({}).get({
            path: "alternative",
            alternative: "test.1",
            object: {path: "path"},
        })).toBe("test.1");
    });

    it("should allow getting all data", () => {
        const manager = ObjectManager.on({
            firstName: "John",
            lastName: "Doe",
        });

        expect(manager.get()).toEqual({
            firstName: "John",
            lastName: "Doe",
        });
    });

    it("should allow getting single property", () => {
        const manager = ObjectManager.on({
            firstName: "John",
            lastName: "Doe",
        });

        expect(manager.get("firstName")).toBe("John");
        expect(manager.get({path: "firstName"})).toBe("John");
    });

    it("should get alternative when path is undefined", () => {
        const manager = ObjectManager.on({});

        expect(manager.get("test", "alternative")).toBe("alternative");
        expect(manager.get({
            path: "test",
            alternative: "alternative",
        })).toBe("alternative");

        expect(manager.get({alternative: "alternative"})).toBe("alternative");
    });

    it("should read number path", () => {
        const object = ObjectManager.on();

        object.set(0, "zero");

        expect(object.get(0)).toEqual("zero");
    });
});
