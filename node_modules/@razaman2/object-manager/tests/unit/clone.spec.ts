import {describe, it, expect} from "vitest";
import ObjectManager from "../../src/ObjectManager";

describe("ObjectManager - clone", () => {
    it("should not clone javascript date object", () => {
        const obj = {
            start: new Date("april 1, 2022"),
        };

        const manager1 = ObjectManager.on(obj);

        expect(manager1.clone().start.getDay()).toEqual(new Date("april 1, 2022").getDay());
        expect(ObjectManager.on(new Date()).clone().getDay()).toEqual(new Date().getDay());
    });

    it("should clone array", () => {
        const arr = ["super", "admin", "user"];

        const manager = ObjectManager.on(arr);

        expect(arr).toBe(manager.get());
        expect(arr).not.toBe(manager.clone());
    });

    it("should clone object", () => {
        const obj = {firstName: "John", lastName: "Doe"};

        const manager = ObjectManager.on(obj);

        expect(obj).toBe(manager.get());
        expect(obj).not.toBe(manager.clone());
    });

    it("should clone nested object", () => {
        const obj = {
            user: {
                firstName: "John",
                lastName: "Doe",
                roles: ["super", "admin", "user"],
                children: [
                    {
                        firstName: "Foo",
                        lastName: "Bar",
                        roles: ["user"],
                    },
                ],
            },
        };

        const manager = ObjectManager.on(obj);

        expect(obj).toBe(manager.get());
        expect(obj).not.toBe(manager.clone());

        expect(obj.user).toBe(manager.get().user);
        expect(obj.user).not.toBe(manager.clone().user);

        expect(obj.user.roles).toBe(manager.get().user.roles);
        expect(obj.user.roles).not.toBe(manager.clone().user.roles);

        expect(obj.user.children).toBe(manager.get().user.children);
        expect(obj.user.children).not.toBe(manager.clone().user.children);

        expect(obj.user.children[0]).toBe(manager.get().user.children[0]);
        expect(obj.user.children[0]).not.toBe(manager.clone().user.children[0]);

        expect(obj.user.children[0]!.roles).toBe(manager.get().user.children[0].roles);
        expect(obj.user.children[0]!.roles).not.toBe(manager.clone().user.children[0].roles);
    });
});
