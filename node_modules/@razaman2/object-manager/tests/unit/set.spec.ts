import ObjectManager from "../../src/ObjectManager";

describe("ObjectManager - set", () => {
    it("should properly create array when necessary", () => {
        const manager = ObjectManager.on({});

        manager.set("roles.0", "admin");
        manager.set("roles.1", "super");

        expect(manager.get()).toMatchObject({roles: ["admin", "super"]});
    });

    it('should set array', () => {
        const manager = ObjectManager.on([]);

        expect(manager.set(0, 'zero')).toEqual(['zero']);
    });

    it('should set object', () => {
        const obj = {
            user: {
                firstName: 'John',
                lastName: 'Doe',
                roles: ['super', 'admin', 'user'],
                children: [
                    {
                        firstName: 'Foo',
                        lastName: 'Bar',
                        roles: ['user']
                    },
                ]
            },
        };

        const manager = ObjectManager.on(obj);

        expect(manager.get()).toStrictEqual({
            user: {
                firstName: 'John',
                lastName: 'Doe',
                roles: ['super', 'admin', 'user'],
                children: [
                    {
                        firstName: 'Foo',
                        lastName: 'Bar',
                        roles: ['user']
                    },
                ]
            }
        });
    });

    it('should set from object instead of path/value', () => {
        expect(ObjectManager.on({}).set({
            object: {
                user: {
                    firstName: 'John',
                    lastName: 'Doe',
                    roles: ['super', 'admin', 'user'],
                    children: [
                        {
                            firstName: 'Foo',
                            lastName: 'Bar',
                            roles: ['user']
                        },
                    ]
                },
            }
        })).toEqual({
            user: {
                firstName: 'John',
                lastName: 'Doe',
                roles: ['super', 'admin', 'user'],
                children: [
                    {
                        firstName: 'Foo',
                        lastName: 'Bar',
                        roles: ['user']
                    },
                ]
            },
        });
    });

    it('should set from array instead of path/value', () => {
        expect(ObjectManager.on([]).set({
            object: ['super', 'admin', 'user']
        })).toEqual(['super', 'admin', 'user']);
    });

    it('should set data at empty path', () => {
        const manager = ObjectManager.on({});

        expect(manager.set('', 'jane doe')).toEqual({'': 'jane doe'});
        expect(manager.set('', 'john doe')).toEqual({'': 'john doe'});
    });

    it('set string', () => {
        const manager = ObjectManager.on({});

        manager.set('test', 'test1');

        expect(manager.get('test')).toBe('test1');
    });

    it('set string on object', () => {
        const manager = ObjectManager.on({});

        manager.set({object: {test: 'test1'}});

        expect(manager.get('test')).toBe('test1');
    });

    it('set number', () => {
        const manager = ObjectManager.on({});

        manager.set(0, 'test1');

        expect(manager.get(0)).toBe('test1');
    });

    it('set number on object', () => {
        const manager = ObjectManager.on({});

        manager.set({object: {0: 'test1'}});

        expect(manager.get(0)).toBe('test1');
    });

    it('should preserve prototype', () => {
        const obj1 = Object.setPrototypeOf({}, {testProto1: 'proto1', testProto2: 'proto2'});
        const obj2 = Object.setPrototypeOf({}, {testProto3: 'proto3', testProto4: 'proto4'});
        const manager = ObjectManager.on({});

        manager.set('proto.test', obj1);
        manager.set('proto.test.more', obj2)

        expect(manager.get('proto.testProto1')).toBe('proto1');
        expect(manager.get('proto.testProto2')).toBe('proto2');
        expect(manager.get('proto.test.more.testProto3')).toBe('proto3');
        expect(manager.get('proto.test.more.testProto4')).toBe('proto4');
    });

    it('set path and value from object path/value', () => {
        expect(ObjectManager.on({}).set({path: 'user.name', value: 'jane doe'})).toEqual({
            user: {
                name: 'jane doe'
            }
        });
    });

    it("should allow setting data with path", () => {
        const manager1 = new ObjectManager();
        const manager2 = new ObjectManager();
        const manager3 = new ObjectManager();

        manager1.set("user.name.first", "George Lopez");
        manager2.set("user.record.roles", ["admin", "super", "tech"]);
        manager3.set("user.record.info", {firstName: "John", lastName: "Doe"});

        expect(manager1.get()).toEqual({
            user: {
                name: {
                    first: "George Lopez"
                }
            }
        });

        expect(manager2.get()).toEqual({
            user: {
                record: {
                    roles: ['admin', 'super', 'tech']
                }
            }
        });

        expect(manager3.get()).toEqual({
            user: {
                record: {
                    info: {
                        firstName: "John",
                        lastName: "Doe"
                    }
                }
            }
        });
    });

    it('should set data at empty path', () => {
        const manager = ObjectManager.on({});

        manager.set('jane doe')

        expect(manager.get()).toEqual('jane doe');
    });

    it('should overwrite empty path data', () => {
        const manager = ObjectManager.on({});

        manager.set('jane doe')
        expect(manager.get()).toEqual('jane doe');

        manager.set('john doe');
        expect(manager.get()).toEqual('john doe');
    });
});

describe('ObjectManager - set2', () => {
    it('should set object', () => {
        expect(ObjectManager.on().set({firstName: 'john', lastName: 'doe'})).toEqual({
            firstName: 'john',
            lastName: 'doe'
        });
    });

    it('should set array', () => {
        expect(ObjectManager.on([]).set(['super', 'admin'])).toEqual(['super', 'admin']);
    });

    it('should set string', () => {
        expect(ObjectManager.on().set('string')).toEqual({'': 'string'});
    });

    it('should set number', () => {
        expect(ObjectManager.on().set(0)).toEqual({'': 0});
        expect(ObjectManager.on().set(1)).toEqual({'': 1});
    });

    it('should set boolean', () => {
        expect(ObjectManager.on().set(true)).toEqual({'': true});
        expect(ObjectManager.on().set(false)).toEqual({'': false});
    });

    it('should set data from options object', () => {
        expect(ObjectManager.on().set({
            path: 'user',
            value: {
                firstName: 'john',
                lastName: 'doe',
            }
        })).toEqual({
            user: {
                firstName: 'john',
                lastName: 'doe',
            }
        });

        expect(ObjectManager.on().set({
            value: {
                firstName: 'john',
                lastName: 'doe',
            }
        })).toEqual({
            firstName: 'john',
            lastName: 'doe',
        });

        expect(ObjectManager.on().set({
            object: {
                firstName: 'john',
                lastName: 'doe',
            }
        })).toEqual({
            firstName: 'john',
            lastName: 'doe',
        });
    });

    it('should set data at path', () => {
        expect(ObjectManager.on().set('user', {
            firstName: 'john',
            lastName: 'doe',
        })).toEqual({
            user: {
                firstName: 'john',
                lastName: 'doe',
            }
        });

        expect(ObjectManager.on().set('roles', ['super', 'admin'])).toEqual({
            roles: ['super', 'admin']
        });

        expect(ObjectManager.on().set('boolean', true)).toEqual({boolean: true});
        expect(ObjectManager.on().set('boolean', false)).toEqual({boolean: false});

        expect(ObjectManager.on().set('string', 'string')).toEqual({string: 'string'});

        expect(ObjectManager.on().set('number', 0)).toEqual({number: 0});
        expect(ObjectManager.on().set('number', 1)).toEqual({number: 1});
    });
});
