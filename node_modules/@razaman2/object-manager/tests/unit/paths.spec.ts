import ObjectManager from "../../src/ObjectManager";

describe("ObjectManager - paths", () => {
    it("it should generate paths from object", () => {
        const manager = ObjectManager.on({
            user: {
                name: {
                    first: "John",
                    last: "Doe",
                },
            },
        });

        expect(manager.paths()).toMatchObject([
            "user.name.first",
            "user.name.last",
        ]);
    });

    it("it should generate paths from array", () => {
        const manager = ObjectManager.on({
            user: {
                record: {
                    roles: ["super", "admin", "sales"],
                },
            },
        });

        expect(manager.paths()).toMatchObject([
            "user.record.roles.0",
            "user.record.roles.1",
            "user.record.roles.2",
        ]);
    });

    it("should create valid paths", () => {
        const params1 = {
            age: 37,
            danger: () => true,
            stranger: () => true,
            firstName: "John",
            lastName: "Doe",
            address: {
                city: "Old Bridge",
                coords: {
                    lat: 100,
                    lng: 200,
                },
            },
            roles: ["super", "admin"],
            createdAt: {
                toDate: () => true,
                date: new Date(),
                param1: 1,
                param2: 2,
            },
        };

        const params2 = {
            age: 37,
            danger: () => true,
            stranger: () => true,
            firstName: "John",
            lastName: "Doe",
            address: {
                city: "Old Bridge",
                coords: {
                    lat: 100,
                    lng: 200,
                },
            },
            roles: ["super", "admin"],
            createdAt: {
                date: new Date(),
                param1: 1,
                param2: 2,
            },
        };

        expect(ObjectManager.on(params1).paths()).toStrictEqual([
            "age", "danger", "stranger", "firstName", "lastName", "address.city", "address.coords.lat", "address.coords.lng", "roles.0", "roles.1", "createdAt"
        ]);

        expect(ObjectManager.on(params2).paths()).toStrictEqual([
            "age", "danger", "stranger", "firstName", "lastName", "address.city", "address.coords.lat", "address.coords.lng", "roles.0", "roles.1", "createdAt.date", "createdAt.param1", "createdAt.param2"
        ]);
    });

    it("should process paths for objects with undefined or null values", () => {
        const paths = ObjectManager.on({
            name: "jane doe",
            status: null,
            age: undefined,
        }).paths();

        expect(paths).toStrictEqual(["name", "status", "age"]);
    });

    it('should ignore paths', () => {
        const obj = {
            address: {
                city: "Old Bridge",
                coords: {
                    lat: 100,
                    lng: 200,
                },
                one: {test: true},
            },
            two: {test: true}
        }

        const manager = ObjectManager.on(obj, {
            paths: {
                full: true,
                test: (path) => {
                    // ['address', '\w+\.test']
                    return ![/^address\.coords\./, /^address\.one\./, /^two\./].find((item) => RegExp(item).test(path))
                }
            }
        });

        console.log('manager paths:', manager.paths());
    });
});
