type WriteOptions = {
    path?: string | number;
    value?: any;
    object?: Parseable;
};
type ReadOptions = {
    path?: string | number;
    alternative?: any;
    object?: Parseable;
};
type Options = {
    skip?: SkipList;
    functions?: boolean;
    paths?: {
        full?: boolean;
        test?: (path: string) => any;
    };
};
type SkipList = Array<any> | false;
type Parseable = any;

declare class ObjectManager {
    private object;
    private options;
    private readonly skipped;
    constructor(object?: Parseable, options?: Options);
    paths(object?: any, path?: string): string[];
    get(): any;
    get(options: ReadOptions): any;
    get(path: string | number, alternative?: any): any;
    set(value: any): Parseable;
    set(options: WriteOptions): Parseable;
    set(path: string | number, value: any): Parseable;
    copy(object: Parseable): this;
    clone(object?: Parseable): any;
    static on(object?: Parseable, options?: Options): ObjectManager;
    private skip;
}

export { Parseable, ReadOptions, SkipList, WriteOptions, ObjectManager as default };
